"""
Interface Streamlit para Geometria Anal√≠tica
Aplica√ß√£o web interativa para c√°lculos de matrizes, vetores e geometria anal√≠tica
"""

import streamlit as st
import numpy as np
import sys
import os

# Adicionar o diret√≥rio src ao path para importar os m√≥dulos
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.matriz_operations import *
from core.vector_operations import *
from core.geometric_operations import *

st.set_page_config(page_title="Geometria Anal√≠tica - Calculadora Interativa", layout="centered")

st.title("üßÆ Calculadora de Geometria Anal√≠tica")

# Centralizar imagem pequena
st.markdown(
    """
    <div style="text-align: center;">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Frans_Hals_-_Portret_van_Ren%C3%A9_Descartes.jpg/800px-Frans_Hals_-_Portret_van_Ren%C3%A9_Descartes.jpg" width="150">
        <p style="font-size:12px;">"Ren√© Descartes, o pai da geometria anal√≠tica."</p>
    </div>
    """,
    unsafe_allow_html=True
)

# Sidebar para sele√ß√£o de categoria
categoria = st.sidebar.selectbox(
    "Escolha a categoria:",
    ["Matrizes", "Vetores", "Geometria Anal√≠tica"]
)

if categoria == "Matrizes":
    st.header("üìä Opera√ß√µes com Matrizes")
    
    st.markdown("Digite a matriz separando colunas por espa√ßo e linhas por ENTER:")
    entrada = st.text_area("Exemplo:", "1 2 3\n0 1 4\n5 6 0")
    
    opcao = st.selectbox(
        "Escolha a opera√ß√£o:",
        [
            "Determinante (Regra de Sarrus)",
            "Determinante da Matriz",
            "Transposta da Matriz",
            "Forma Escada (Gauss-Jordan)",
            "Inversa da Matriz",
            "Verificar se √© Invert√≠vel",
            "Posto da Matriz",
            "Resolver Sistema Linear",
            "Produto de Matrizes",
            "Verificar Tipo de Matriz"
        ]
    )
    
    def parse_matrix(texto):
        try:
            return np.array([list(map(float, linha.split())) for linha in texto.strip().split('\n')])
        except:
            return None
    
    if st.button("Calcular"):
        matriz = parse_matrix(entrada)
        if matriz is None:
            st.error("Formato inv√°lido! Use espa√ßo entre n√∫meros e ENTER para nova linha.")
        else:
            st.write("Matriz inserida:")
            st.write(matriz)
            
            if opcao == "Determinante (Regra de Sarrus)":
                resultado = regra_de_sarrus(matriz)
                st.write(f"**Resultado:** {resultado}")
                
            elif opcao == "Determinante da Matriz":
                resultado = determinante(matriz)
                st.write(f"**Resultado:** {resultado}")
                
            elif opcao == "Transposta da Matriz":
                resultado = transposta(matriz)
                st.write("**Matriz Transposta:**")
                st.write(resultado)
                
            elif opcao == "Forma Escada (Gauss-Jordan)":
                resultado = forma_escada(matriz)
                st.write("**Forma Escada:**")
                st.write(resultado)
                
            elif opcao == "Inversa da Matriz":
                resultado = inversa_matriz(matriz)
                st.write("**Matriz Inversa:**")
                st.write(resultado)
                
            elif opcao == "Verificar se √© Invert√≠vel":
                resultado = eh_invertivel(matriz)
                if resultado:
                    st.success("‚úÖ Sim. A matriz √© invert√≠vel.")
                else:
                    st.error("‚ùå N√£o. A matriz N√ÉO √© invert√≠vel.")
                    
            elif opcao == "Posto da Matriz":
                resultado = calcular_posto(matriz)
                st.write(f"**Resultado:** {resultado}")
                
            elif opcao == "Resolver Sistema Linear":
                resultado = resolver_sistema(matriz)
                st.write(f"**Solu√ß√£o:** {resultado}")
                
            elif opcao == "Produto de Matrizes":
                st.write("Digite a segunda matriz:")
                entrada2 = st.text_area("Segunda matriz:", "1 0\n0 1\n1 1")
                matriz2 = parse_matrix(entrada2)
                if matriz2 is not None:
                    resultado = produto_matrizes(matriz, matriz2)
                    st.write("**Produto das Matrizes:**")
                    st.write(resultado)
                    
            elif opcao == "Verificar Tipo de Matriz":
                resultado = verificar_tipo_matriz(matriz)
                st.write("**Propriedades da Matriz:**")
                for prop, valor in resultado.items():
                    if valor:
                        st.write(f"‚úÖ {prop.capitalize()}")
                    else:
                        st.write(f"‚ùå {prop.capitalize()}")

elif categoria == "Vetores":
    st.header("‚û°Ô∏è Opera√ß√µes com Vetores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Vetor 1")
        v1_x = st.number_input("x1:", value=1.0)
        v1_y = st.number_input("y1:", value=1.0)
        v1_z = st.number_input("z1:", value=0.0)
        
    with col2:
        st.subheader("Vetor 2")
        v2_x = st.number_input("x2:", value=-1.0)
        v2_y = st.number_input("y2:", value=1.0)
        v2_z = st.number_input("z2:", value=0.0)
    
    vetor1 = np.array([v1_x, v1_y, v1_z])
    vetor2 = np.array([v2_x, v2_y, v2_z])
    
    opcao_vetor = st.selectbox(
        "Escolha a opera√ß√£o:",
        [
            "Soma de Vetores",
            "Multiplica√ß√£o por Escalar",
            "Produto Escalar",
            "Produto Vetorial",
            "√Çngulo entre Vetores",
            "Norma do Vetor",
            "Vetor Unit√°rio",
            "Dist√¢ncia entre Pontos",
            "Proje√ß√£o Vetorial",
            "Verificar se s√£o Ortogonais",
            "Verificar se s√£o Paralelos"
        ]
    )
    
    escalar = st.number_input("Escalar (para multiplica√ß√£o):", value=2.0)
    
    if st.button("Calcular Opera√ß√£o Vetorial"):
        st.write("**Vetor 1:**", vetor1)
        st.write("**Vetor 2:**", vetor2)
        
        if opcao_vetor == "Soma de Vetores":
            resultado = soma_vetores(vetor1, vetor2)
            st.write("**Soma:**", resultado)
            
        elif opcao_vetor == "Multiplica√ß√£o por Escalar":
            resultado = multiplicacao_escalar(vetor1, escalar)
            st.write(f"**{escalar} √ó Vetor 1:**", resultado)
            
        elif opcao_vetor == "Produto Escalar":
            resultado = produto_escalar(vetor1, vetor2)
            st.write("**Produto Escalar:**", resultado)
            
        elif opcao_vetor == "Produto Vetorial":
            resultado = produto_vetorial(vetor1, vetor2)
            st.write("**Produto Vetorial:**", resultado)
            
        elif opcao_vetor == "√Çngulo entre Vetores":
            resultado = angulo_entre_vetores(vetor1, vetor2)
            st.write(f"**√Çngulo:** {resultado:.2f}¬∞")
            
        elif opcao_vetor == "Norma do Vetor":
            resultado1 = norma_vetor(vetor1)
            resultado2 = norma_vetor(vetor2)
            st.write(f"**Norma do Vetor 1:** {resultado1:.2f}")
            st.write(f"**Norma do Vetor 2:** {resultado2:.2f}")
            
        elif opcao_vetor == "Vetor Unit√°rio":
            resultado1 = vetor_unitario(vetor1)
            resultado2 = vetor_unitario(vetor2)
            st.write("**Vetor Unit√°rio 1:**", resultado1)
            st.write("**Vetor Unit√°rio 2:**", resultado2)
            
        elif opcao_vetor == "Dist√¢ncia entre Pontos":
            resultado = distancia_entre_pontos(vetor1, vetor2)
            st.write(f"**Dist√¢ncia:** {resultado:.2f}")
            
        elif opcao_vetor == "Proje√ß√£o Vetorial":
            resultado = projecao_vetorial(vetor1, vetor2)
            st.write("**Proje√ß√£o de v1 sobre v2:**", resultado)
            
        elif opcao_vetor == "Verificar se s√£o Ortogonais":
            resultado = sao_ortogonais(vetor1, vetor2)
            if resultado:
                st.success("‚úÖ Os vetores s√£o ortogonais")
            else:
                st.info("‚ùå Os vetores n√£o s√£o ortogonais")
                
        elif opcao_vetor == "Verificar se s√£o Paralelos":
            resultado = sao_paralelos(vetor1, vetor2)
            if resultado:
                st.success("‚úÖ Os vetores s√£o paralelos")
            else:
                st.info("‚ùå Os vetores n√£o s√£o paralelos")

elif categoria == "Geometria Anal√≠tica":
    st.header("üìê Geometria Anal√≠tica")
    
    subcategoria = st.selectbox(
        "Escolha a subcategoria:",
        ["Retas", "Planos", "Dist√¢ncias e √Çngulos"]
    )
    
    if subcategoria == "Retas":
        st.subheader("üìè Opera√ß√µes com Retas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Reta 1:**")
            p1_x = st.number_input("Ponto 1 - x:", value=0.0, key="p1x")
            p1_y = st.number_input("Ponto 1 - y:", value=0.0, key="p1y")
            p1_z = st.number_input("Ponto 1 - z:", value=0.0, key="p1z")
            v1_x = st.number_input("Vetor 1 - x:", value=1.0, key="v1x")
            v1_y = st.number_input("Vetor 1 - y:", value=0.0, key="v1y")
            v1_z = st.number_input("Vetor 1 - z:", value=0.0, key="v1z")
            
        with col2:
            st.write("**Reta 2:**")
            p2_x = st.number_input("Ponto 2 - x:", value=1.0, key="p2x")
            p2_y = st.number_input("Ponto 2 - y:", value=0.0, key="p2y")
            p2_z = st.number_input("Ponto 2 - z:", value=0.0, key="p2z")
            v2_x = st.number_input("Vetor 2 - x:", value=0.0, key="v2x")
            v2_y = st.number_input("Vetor 2 - y:", value=1.0, key="v2y")
            v2_z = st.number_input("Vetor 2 - z:", value=0.0, key="v2z")
        
        ponto1 = np.array([p1_x, p1_y, p1_z])
        vetor1 = np.array([v1_x, v1_y, v1_z])
        ponto2 = np.array([p2_x, p2_y, p2_z])
        vetor2 = np.array([v2_x, v2_y, v2_z])
        
        opcao_reta = st.selectbox(
            "Escolha a opera√ß√£o:",
            [
                "Equa√ß√£o Param√©trica da Reta 1",
                "Equa√ß√£o Sim√©trica da Reta 1",
                "√Çngulo entre Retas",
                "Dist√¢ncia entre Retas",
                "Verificar se s√£o Paralelas",
                "Verificar se s√£o Perpendiculares"
            ]
        )
        
        if st.button("Calcular Opera√ß√£o com Retas"):
            if opcao_reta == "Equa√ß√£o Param√©trica da Reta 1":
                resultado = equacao_parametrica_reta(ponto1, vetor1)
                st.write("**Equa√ß√£o Param√©trica:**", resultado)
                
            elif opcao_reta == "Equa√ß√£o Sim√©trica da Reta 1":
                resultado = equacao_simetrica_reta(ponto1, vetor1)
                st.write("**Equa√ß√£o Sim√©trica:**", resultado)
                
            elif opcao_reta == "√Çngulo entre Retas":
                resultado = angulo_entre_retas(vetor1, vetor2)
                st.write(f"**√Çngulo:** {resultado:.2f}¬∞")
                
            elif opcao_reta == "Dist√¢ncia entre Retas":
                resultado = distancia_entre_duas_retas(ponto1, vetor1, ponto2, vetor2)
                st.write(f"**Dist√¢ncia:** {resultado}")
                
            elif opcao_reta == "Verificar se s√£o Paralelas":
                resultado = sao_paralelas_retas(vetor1, vetor2)
                if resultado:
                    st.success("‚úÖ As retas s√£o paralelas")
                else:
                    st.info("‚ùå As retas n√£o s√£o paralelas")
                    
            elif opcao_reta == "Verificar se s√£o Perpendiculares":
                resultado = sao_perpendiculares_retas(vetor1, vetor2)
                if resultado:
                    st.success("‚úÖ As retas s√£o perpendiculares")
                else:
                    st.info("‚ùå As retas n√£o s√£o perpendiculares")
    
    elif subcategoria == "Planos":
        st.subheader("üõ©Ô∏è Opera√ß√µes com Planos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Plano 1:**")
            p1_x = st.number_input("Ponto - x:", value=0.0, key="pp1x")
            p1_y = st.number_input("Ponto - y:", value=0.0, key="pp1y")
            p1_z = st.number_input("Ponto - z:", value=0.0, key="pp1z")
            n1_x = st.number_input("Normal - x:", value=1.0, key="n1x")
            n1_y = st.number_input("Normal - y:", value=0.0, key="n1y")
            n1_z = st.number_input("Normal - z:", value=0.0, key="n1z")
            
        with col2:
            st.write("**Plano 2:**")
            n2_x = st.number_input("Normal 2 - x:", value=0.0, key="n2x")
            n2_y = st.number_input("Normal 2 - y:", value=1.0, key="n2y")
            n2_z = st.number_input("Normal 2 - z:", value=0.0, key="n2z")
        
        ponto_plano = np.array([p1_x, p1_y, p1_z])
        normal1 = np.array([n1_x, n1_y, n1_z])
        normal2 = np.array([n2_x, n2_y, n2_z])
        
        opcao_plano = st.selectbox(
            "Escolha a opera√ß√£o:",
            [
                "Equa√ß√£o Param√©trica do Plano",
                "Equa√ß√£o Cartesiana do Plano",
                "√Çngulo entre Planos"
            ]
        )
        
        if st.button("Calcular Opera√ß√£o com Planos"):
            if opcao_plano == "Equa√ß√£o Param√©trica do Plano":
                # Para equa√ß√£o param√©trica, precisamos de dois vetores dire√ß√£o
                vetor1 = np.array([1, 0, 0])
                vetor2 = np.array([0, 1, 0])
                resultado = equacao_parametrica_plano(ponto_plano, vetor1, vetor2)
                st.write("**Equa√ß√£o Param√©trica:**", resultado)
                
            elif opcao_plano == "Equa√ß√£o Cartesiana do Plano":
                resultado = equacao_cartesiana_plano(ponto_plano, normal1)
                st.write("**Equa√ß√£o Cartesiana:**", resultado)
                
            elif opcao_plano == "√Çngulo entre Planos":
                resultado = angulo_entre_planos(normal1, normal2)
                st.write(f"**√Çngulo:** {resultado:.2f}¬∞")
    
    elif subcategoria == "Dist√¢ncias e √Çngulos":
        st.subheader("üìè Dist√¢ncias e √Çngulos")
        
        st.write("**Ponto:**")
        px = st.number_input("x:", value=1.0)
        py = st.number_input("y:", value=1.0)
        pz = st.number_input("z:", value=1.0)
        
        ponto = np.array([px, py, pz])
        
        opcao_dist = st.selectbox(
            "Escolha a opera√ß√£o:",
            [
                "Dist√¢ncia Ponto-Reta",
                "Dist√¢ncia Ponto-Plano"
            ]
        )
        
        if opcao_dist == "Dist√¢ncia Ponto-Reta":
            st.write("**Ponto da Reta:**")
            pr_x = st.number_input("Ponto Reta - x:", value=0.0)
            pr_y = st.number_input("Ponto Reta - y:", value=0.0)
            pr_z = st.number_input("Ponto Reta - z:", value=0.0)
            
            st.write("**Vetor Dire√ß√£o:**")
            vd_x = st.number_input("Vetor Dir - x:", value=1.0)
            vd_y = st.number_input("Vetor Dir - y:", value=0.0)
            vd_z = st.number_input("Vetor Dir - z:", value=0.0)
            
            ponto_reta = np.array([pr_x, pr_y, pr_z])
            vetor_direcao = np.array([vd_x, vd_y, vd_z])
            
        elif opcao_dist == "Dist√¢ncia Ponto-Plano":
            st.write("**Ponto do Plano:**")
            pp_x = st.number_input("Ponto Plano - x:", value=0.0)
            pp_y = st.number_input("Ponto Plano - y:", value=0.0)
            pp_z = st.number_input("Ponto Plano - z:", value=0.0)
            
            st.write("**Vetor Normal:**")
            vn_x = st.number_input("Vetor Normal - x:", value=1.0)
            vn_y = st.number_input("Vetor Normal - y:", value=0.0)
            vn_z = st.number_input("Vetor Normal - z:", value=0.0)
            
            ponto_plano = np.array([pp_x, pp_y, pp_z])
            vetor_normal = np.array([vn_x, vn_y, vn_z])
        
        if st.button("Calcular Dist√¢ncia"):
            if opcao_dist == "Dist√¢ncia Ponto-Reta":
                resultado = distancia_ponto_reta(ponto, ponto_reta, vetor_direcao)
                st.write(f"**Dist√¢ncia:** {resultado:.2f}")
                
            elif opcao_dist == "Dist√¢ncia Ponto-Plano":
                resultado = distancia_ponto_plano(ponto, ponto_plano, vetor_normal)
                st.write(f"**Dist√¢ncia:** {resultado:.2f}")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style="text-align: center;">
        <p>Desenvolvido com ‚ù§Ô∏è para o estudo de Geometria Anal√≠tica</p>
        <p>Baseado nos conte√∫dos de Leandro Cruvinel</p>
    </div>
    """,
    unsafe_allow_html=True
) 